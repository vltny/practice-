import json
from aiogram import F, Router
from aiogram.types import Message, FSInputFile
from aiogram.filters import CommandStart
import app.keyboards as kb
from app.additional import updateMenu

router = Router()
user_state = {}


@router.message(CommandStart())
async def cmd_help(message: Message):
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –ö–¢–ó', reply_markup=kb.main)


@router.message(F.text == 'üîç –ù–æ–≤–æ—Å—Ç–∏')
async def handle_message_news(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è', reply_markup=kb.news)


@router.message(F.text == 'üçΩ –ú–µ–Ω—é —Å—Ç–æ–ª–æ–≤–æ–π')
async def handle_message_menu(message: Message):
    file = FSInputFile('data/Menu.pdf')
    await message.answer_document(document=file, caption='–ú–µ–Ω—é —Å—Ç–æ–ª–æ–≤–æ–π')
    menu_lines = updateMenu()
    text = ""
    for line in menu_lines:
        if ((len(text) + len(line) > 4000) or ('|' in line)):
            line = line.replace('|', '')
            await message.answer(text, parse_mode="HTML")
            text = ""
        text += line

    if text:
        await message.answer(text, parse_mode="HTML")


@router.message(F.text == 'üöç –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç')
async def handle_message_transport(message: Message):
    await message.answer("–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")


@router.message(F.text == 'ü™™ –°–æ—Ü. –ø—Ä–æ–≥—Ä–∞–º–º—ã')
async def handle_message_social(message: Message):
    await message.answer("–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")


@router.message(F.text == 'üìä –û–ø—Ä–æ—Å')
async def handle_message_survey(message: Message):
    await message.answer("–û–ø—Ä–æ—Å—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")


@router.message(F.text == 'üì§ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å')
async def handle_message_ask(message: Message):
    await message.answer("–í–æ–ø—Ä–æ—Å—ã –∫ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

@router.message(F.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥')
async def handle_message_back(message: Message):
    await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é", reply_markup=kb.main)


@router.message(F.text == 'üöÄ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏')
async def handle_message_last_news(message: Message):
    user_id = message.from_user.id
    user_state[user_id] = {'waiting_number': True,
                           'category': 'all'}
    await message.answer('–°–∫–æ–ª—å–∫–æ –Ω–æ–≤–æ—Å—Ç–µ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?')


@router.message(F.text == 'üß© –ö–∞—Ç–µ–≥–æ—Ä–∏–∏')
async def handle_message_categories(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kb.newsCategories)


@router.message(F.text == 'üéâ –ü—Ä–∞–∑–¥–Ω–∏–∫–∏')
async def handle_news_holidays(message: Message):
    user_id = message.from_user.id
    user_state[user_id] = {'waiting_number': True,
                           'category': '–ü—Ä–∞–∑–¥–Ω–∏–∫–∏'}
    await message.answer('–°–∫–æ–ª—å–∫–æ –Ω–æ–≤–æ—Å—Ç–µ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?')


@router.message(F.text == 'üè≠ –ñ–∏–∑–Ω—å –∑–∞–≤–æ–¥–∞')
async def handle_news_life(message: Message):
    user_id = message.from_user.id
    user_state[user_id] = {'waiting_number': True,
                           'category': '–ñ–∏–∑–Ω—å –∑–∞–≤–æ–¥–∞'}
    await message.answer('–°–∫–æ–ª—å–∫–æ –Ω–æ–≤–æ—Å—Ç–µ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?')


@router.message(F.text == 'üíº –í–∞–∫–∞–Ω—Å–∏–∏')
async def handle_news_vacancies(message: Message):
    user_id = message.from_user.id
    user_state[user_id] = {'waiting_number': True,
                           'category': '–í–∞–∫–∞–Ω—Å–∏–∏'
    }
    await message.answer('–°–∫–æ–ª—å–∫–æ –Ω–æ–≤–æ—Å—Ç–µ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?')


@router.message(F.text == 'üë®‚Äçüîß –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏')
async def handle_news_employees(message: Message):
    user_id = message.from_user.id
    user_state[user_id] = {'waiting_number': True,
                           'category': '–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏'}
    await message.answer('–°–∫–æ–ª—å–∫–æ –Ω–æ–≤–æ—Å—Ç–µ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?')


@router.message(F.text == 'ü¶æ –ò–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è')
async def handle_news_inventions(message: Message):
    user_id = message.from_user.id
    user_state[user_id] = {'waiting_number': True,
                           'category': '–ò–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è'}
    await message.answer('–°–∫–æ–ª—å–∫–æ –Ω–æ–≤–æ—Å—Ç–µ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?')


@router.message(F.text == 'üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è')
async def handle_news_achievements(message: Message):
    user_id = message.from_user.id
    user_state[user_id] = {'waiting_number': True,
                           'category': '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è'}
    await message.answer('–°–∫–æ–ª—å–∫–æ –Ω–æ–≤–æ—Å—Ç–µ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?')


@router.message(lambda m: m.text.isdigit())
async def handle_news_number(message: Message):
    user_id = message.from_user.id
    if user_id not in user_state or not user_state[user_id].get('waiting_number'):
        return

    number = int(message.text)
    if number < 1:
        await message.answer('–ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ')
        return
    user_state[user_id]['number'] = number
    user_state[user_id]['waiting_number'] = False

    await message.answer(f"–í—ã –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ: {user_state[user_id]['number']}, –í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {user_state[user_id]['category']}")
    with open('data/news.json', 'r') as f:
        allNews = json.load(f)
        if(user_state[user_id]['category'] == 'all'):
            filtered = allNews
        else:
            filtered = [n for n in allNews if n["category"] == user_state[user_id]['category']]

        selected = filtered[:user_state[user_id]['number']]

        if not selected:
            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–æ–≤–æ—Å—Ç–µ–π –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç.", reply_markup=kb.main)
        else:
            for news in selected:
                await message.answer(
                    f"<i>{news['category']}</i>\n\n{news['text']}\n\n<b>{news['date']}</b>",
                    parse_mode="HTML", reply_markup=kb.main
                )

        user_state.pop(user_id)
